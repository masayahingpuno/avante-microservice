// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: assignment/v1/assignment.proto

package assignment_v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	assignment_v1 "github.com/happytree09/avante-microservice/assignment.v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AssignmentServiceName is the fully-qualified name of the AssignmentService service.
	AssignmentServiceName = "assignment.v1.AssignmentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AssignmentServiceCreateAssignmentProcedure is the fully-qualified name of the AssignmentService's
	// CreateAssignment RPC.
	AssignmentServiceCreateAssignmentProcedure = "/assignment.v1.AssignmentService/CreateAssignment"
	// AssignmentServiceGetAssignmentProcedure is the fully-qualified name of the AssignmentService's
	// GetAssignment RPC.
	AssignmentServiceGetAssignmentProcedure = "/assignment.v1.AssignmentService/GetAssignment"
	// AssignmentServiceListAssignmentsProcedure is the fully-qualified name of the AssignmentService's
	// ListAssignments RPC.
	AssignmentServiceListAssignmentsProcedure = "/assignment.v1.AssignmentService/ListAssignments"
	// AssignmentServiceUpdateAssignmentProcedure is the fully-qualified name of the AssignmentService's
	// UpdateAssignment RPC.
	AssignmentServiceUpdateAssignmentProcedure = "/assignment.v1.AssignmentService/UpdateAssignment"
	// AssignmentServiceDeleteAssignmentProcedure is the fully-qualified name of the AssignmentService's
	// DeleteAssignment RPC.
	AssignmentServiceDeleteAssignmentProcedure = "/assignment.v1.AssignmentService/DeleteAssignment"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	assignmentServiceServiceDescriptor                = assignment_v1.File_assignment_v1_assignment_proto.Services().ByName("AssignmentService")
	assignmentServiceCreateAssignmentMethodDescriptor = assignmentServiceServiceDescriptor.Methods().ByName("CreateAssignment")
	assignmentServiceGetAssignmentMethodDescriptor    = assignmentServiceServiceDescriptor.Methods().ByName("GetAssignment")
	assignmentServiceListAssignmentsMethodDescriptor  = assignmentServiceServiceDescriptor.Methods().ByName("ListAssignments")
	assignmentServiceUpdateAssignmentMethodDescriptor = assignmentServiceServiceDescriptor.Methods().ByName("UpdateAssignment")
	assignmentServiceDeleteAssignmentMethodDescriptor = assignmentServiceServiceDescriptor.Methods().ByName("DeleteAssignment")
)

// AssignmentServiceClient is a client for the assignment.v1.AssignmentService service.
type AssignmentServiceClient interface {
	// Create a new assignment
	CreateAssignment(context.Context, *connect.Request[assignment_v1.CreateAssignmentRequest]) (*connect.Response[assignment_v1.CreateAssignmentResponse], error)
	// Get details of a specific assignment
	GetAssignment(context.Context, *connect.Request[assignment_v1.GetAssignmentRequest]) (*connect.Response[assignment_v1.GetAssignmentResponse], error)
	// List all assignments
	ListAssignments(context.Context, *connect.Request[assignment_v1.ListAssignmentsRequest]) (*connect.Response[assignment_v1.ListAssignmentsResponse], error)
	// Update an existing assignment
	UpdateAssignment(context.Context, *connect.Request[assignment_v1.UpdateAssignmentRequest]) (*connect.Response[assignment_v1.UpdateAssignmentResponse], error)
	// Delete an assignment
	DeleteAssignment(context.Context, *connect.Request[assignment_v1.DeleteAssignmentRequest]) (*connect.Response[assignment_v1.DeleteAssignmentResponse], error)
}

// NewAssignmentServiceClient constructs a client for the assignment.v1.AssignmentService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAssignmentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AssignmentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &assignmentServiceClient{
		createAssignment: connect.NewClient[assignment_v1.CreateAssignmentRequest, assignment_v1.CreateAssignmentResponse](
			httpClient,
			baseURL+AssignmentServiceCreateAssignmentProcedure,
			connect.WithSchema(assignmentServiceCreateAssignmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAssignment: connect.NewClient[assignment_v1.GetAssignmentRequest, assignment_v1.GetAssignmentResponse](
			httpClient,
			baseURL+AssignmentServiceGetAssignmentProcedure,
			connect.WithSchema(assignmentServiceGetAssignmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAssignments: connect.NewClient[assignment_v1.ListAssignmentsRequest, assignment_v1.ListAssignmentsResponse](
			httpClient,
			baseURL+AssignmentServiceListAssignmentsProcedure,
			connect.WithSchema(assignmentServiceListAssignmentsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAssignment: connect.NewClient[assignment_v1.UpdateAssignmentRequest, assignment_v1.UpdateAssignmentResponse](
			httpClient,
			baseURL+AssignmentServiceUpdateAssignmentProcedure,
			connect.WithSchema(assignmentServiceUpdateAssignmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteAssignment: connect.NewClient[assignment_v1.DeleteAssignmentRequest, assignment_v1.DeleteAssignmentResponse](
			httpClient,
			baseURL+AssignmentServiceDeleteAssignmentProcedure,
			connect.WithSchema(assignmentServiceDeleteAssignmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// assignmentServiceClient implements AssignmentServiceClient.
type assignmentServiceClient struct {
	createAssignment *connect.Client[assignment_v1.CreateAssignmentRequest, assignment_v1.CreateAssignmentResponse]
	getAssignment    *connect.Client[assignment_v1.GetAssignmentRequest, assignment_v1.GetAssignmentResponse]
	listAssignments  *connect.Client[assignment_v1.ListAssignmentsRequest, assignment_v1.ListAssignmentsResponse]
	updateAssignment *connect.Client[assignment_v1.UpdateAssignmentRequest, assignment_v1.UpdateAssignmentResponse]
	deleteAssignment *connect.Client[assignment_v1.DeleteAssignmentRequest, assignment_v1.DeleteAssignmentResponse]
}

// CreateAssignment calls assignment.v1.AssignmentService.CreateAssignment.
func (c *assignmentServiceClient) CreateAssignment(ctx context.Context, req *connect.Request[assignment_v1.CreateAssignmentRequest]) (*connect.Response[assignment_v1.CreateAssignmentResponse], error) {
	return c.createAssignment.CallUnary(ctx, req)
}

// GetAssignment calls assignment.v1.AssignmentService.GetAssignment.
func (c *assignmentServiceClient) GetAssignment(ctx context.Context, req *connect.Request[assignment_v1.GetAssignmentRequest]) (*connect.Response[assignment_v1.GetAssignmentResponse], error) {
	return c.getAssignment.CallUnary(ctx, req)
}

// ListAssignments calls assignment.v1.AssignmentService.ListAssignments.
func (c *assignmentServiceClient) ListAssignments(ctx context.Context, req *connect.Request[assignment_v1.ListAssignmentsRequest]) (*connect.Response[assignment_v1.ListAssignmentsResponse], error) {
	return c.listAssignments.CallUnary(ctx, req)
}

// UpdateAssignment calls assignment.v1.AssignmentService.UpdateAssignment.
func (c *assignmentServiceClient) UpdateAssignment(ctx context.Context, req *connect.Request[assignment_v1.UpdateAssignmentRequest]) (*connect.Response[assignment_v1.UpdateAssignmentResponse], error) {
	return c.updateAssignment.CallUnary(ctx, req)
}

// DeleteAssignment calls assignment.v1.AssignmentService.DeleteAssignment.
func (c *assignmentServiceClient) DeleteAssignment(ctx context.Context, req *connect.Request[assignment_v1.DeleteAssignmentRequest]) (*connect.Response[assignment_v1.DeleteAssignmentResponse], error) {
	return c.deleteAssignment.CallUnary(ctx, req)
}

// AssignmentServiceHandler is an implementation of the assignment.v1.AssignmentService service.
type AssignmentServiceHandler interface {
	// Create a new assignment
	CreateAssignment(context.Context, *connect.Request[assignment_v1.CreateAssignmentRequest]) (*connect.Response[assignment_v1.CreateAssignmentResponse], error)
	// Get details of a specific assignment
	GetAssignment(context.Context, *connect.Request[assignment_v1.GetAssignmentRequest]) (*connect.Response[assignment_v1.GetAssignmentResponse], error)
	// List all assignments
	ListAssignments(context.Context, *connect.Request[assignment_v1.ListAssignmentsRequest]) (*connect.Response[assignment_v1.ListAssignmentsResponse], error)
	// Update an existing assignment
	UpdateAssignment(context.Context, *connect.Request[assignment_v1.UpdateAssignmentRequest]) (*connect.Response[assignment_v1.UpdateAssignmentResponse], error)
	// Delete an assignment
	DeleteAssignment(context.Context, *connect.Request[assignment_v1.DeleteAssignmentRequest]) (*connect.Response[assignment_v1.DeleteAssignmentResponse], error)
}

// NewAssignmentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAssignmentServiceHandler(svc AssignmentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	assignmentServiceCreateAssignmentHandler := connect.NewUnaryHandler(
		AssignmentServiceCreateAssignmentProcedure,
		svc.CreateAssignment,
		connect.WithSchema(assignmentServiceCreateAssignmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assignmentServiceGetAssignmentHandler := connect.NewUnaryHandler(
		AssignmentServiceGetAssignmentProcedure,
		svc.GetAssignment,
		connect.WithSchema(assignmentServiceGetAssignmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assignmentServiceListAssignmentsHandler := connect.NewUnaryHandler(
		AssignmentServiceListAssignmentsProcedure,
		svc.ListAssignments,
		connect.WithSchema(assignmentServiceListAssignmentsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assignmentServiceUpdateAssignmentHandler := connect.NewUnaryHandler(
		AssignmentServiceUpdateAssignmentProcedure,
		svc.UpdateAssignment,
		connect.WithSchema(assignmentServiceUpdateAssignmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assignmentServiceDeleteAssignmentHandler := connect.NewUnaryHandler(
		AssignmentServiceDeleteAssignmentProcedure,
		svc.DeleteAssignment,
		connect.WithSchema(assignmentServiceDeleteAssignmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/assignment.v1.AssignmentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AssignmentServiceCreateAssignmentProcedure:
			assignmentServiceCreateAssignmentHandler.ServeHTTP(w, r)
		case AssignmentServiceGetAssignmentProcedure:
			assignmentServiceGetAssignmentHandler.ServeHTTP(w, r)
		case AssignmentServiceListAssignmentsProcedure:
			assignmentServiceListAssignmentsHandler.ServeHTTP(w, r)
		case AssignmentServiceUpdateAssignmentProcedure:
			assignmentServiceUpdateAssignmentHandler.ServeHTTP(w, r)
		case AssignmentServiceDeleteAssignmentProcedure:
			assignmentServiceDeleteAssignmentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAssignmentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAssignmentServiceHandler struct{}

func (UnimplementedAssignmentServiceHandler) CreateAssignment(context.Context, *connect.Request[assignment_v1.CreateAssignmentRequest]) (*connect.Response[assignment_v1.CreateAssignmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("assignment.v1.AssignmentService.CreateAssignment is not implemented"))
}

func (UnimplementedAssignmentServiceHandler) GetAssignment(context.Context, *connect.Request[assignment_v1.GetAssignmentRequest]) (*connect.Response[assignment_v1.GetAssignmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("assignment.v1.AssignmentService.GetAssignment is not implemented"))
}

func (UnimplementedAssignmentServiceHandler) ListAssignments(context.Context, *connect.Request[assignment_v1.ListAssignmentsRequest]) (*connect.Response[assignment_v1.ListAssignmentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("assignment.v1.AssignmentService.ListAssignments is not implemented"))
}

func (UnimplementedAssignmentServiceHandler) UpdateAssignment(context.Context, *connect.Request[assignment_v1.UpdateAssignmentRequest]) (*connect.Response[assignment_v1.UpdateAssignmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("assignment.v1.AssignmentService.UpdateAssignment is not implemented"))
}

func (UnimplementedAssignmentServiceHandler) DeleteAssignment(context.Context, *connect.Request[assignment_v1.DeleteAssignmentRequest]) (*connect.Response[assignment_v1.DeleteAssignmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("assignment.v1.AssignmentService.DeleteAssignment is not implemented"))
}
